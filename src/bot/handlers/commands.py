from datetime import datetime

from aiogram import types
from babel.dates import format_datetime

from src.bot.keyboards.auth_keyboard import get_registration_keyboard
from src.utils import log, logger, payed_required, token_required
from src.utils.helpers import handle_api_error


@log
async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", reply_markup=get_registration_keyboard()
    )


@token_required
async def get_user_handler(self, message: types.Message):
    try:
        response = await self.user_api.get_user()
        status = response["status"]
        data = response["data"]

        if status != 200:
            await handle_api_error(message, status, data.get("error"))
            await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

        expires_at_raw = data.get("expires_at")
        try:
            expires_at = datetime.fromisoformat(expires_at_raw.replace("Z", "+00:00"))
            expires_at_str = format_datetime(expires_at, "d MMMM y '–≥.' HH:mm", locale="ru")
        except Exception:
            expires_at_str = expires_at_raw

        active_configs = len(data.get("configs") or [])
        profile_text = (
            "üîê <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            "üÜî <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚ñ™Ô∏è ID: <code>{data.get('telegram_id')}</code>\n"
            f"‚ñ™Ô∏è –ò–º—è: <b>{data.get('name')}</b>\n"
            f"‚ñ™Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'‚úÖ –î–∞' if data.get('is_admin') else '‚ùå –ù–µ—Ç'}\n\n"
            "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            f"‚ñ™Ô∏è –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if data.get('is_paid') else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n"
            f"‚ñ™Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expires_at_str}</b>\n\n"
            "‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n"
            f"‚ñ™Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_configs}</b>\n\n"
        )

        await message.answer(profile_text, parse_mode="HTML")

        configs = data.get("configs", [])[:3]
        media = []

        for config in configs:
            content = config.get("config")
            name = config.get("config_path", "config.conf").split("/")[-1]
            if content:
                file = types.BufferedInputFile(content.encode("utf-8"), filename=f"{name}")
                media.append(types.InputMediaDocument(media=file))

        if media:
            await message.bot.send_media_group(chat_id=message.chat.id, media=media)

    except Exception as e:
        logger.exception(f"[get_user_handler] Unexpected error: {e}")
        await message.reply("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@token_required
@payed_required
async def create_config_handler(self, message: types.Message):
    try:
        response = await self.user_api.create_config()
        status = response["status"]
        data = response["data"]

        if status != 200:
            await handle_api_error(message, status, data.get("error"))
            return

        config_name = data.get("config_name", "vpn_config")
        config_text = data.get("config").get("config")
        if not config_text:
            await message.reply("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ–∞–π–ª.")
            return

        await message.reply_document(
            document=types.BufferedInputFile(config_text.encode(), filename=f"{config_name}.conf"),
            caption="‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üîê",
        )

    except Exception as e:
        logger.exception(f"[create_config_handler] Unexpected error: {e}")
        await message.reply("‚ùó –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
