from datetime import datetime

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.crud import confirm_local_payment, create_user, get_user, get_user_label
from src.bot.keyboards.admin_keyboard import (
    get_admin_configs_keyboard,
    get_admin_main_keyboard,
    get_admin_subscriptions_keyboard,
    get_admin_users_keyboard,
)
from src.bot.keyboards.navigations import get_main_menu_keyboard
from src.utils.helpers import handle_api_error

from .states import AdminState, RegistrationState

router = Router()


def get_router() -> Router:
    return router


async def cancel(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


async def check_payment_callback(callback_query: types.CallbackQuery):
    telegram_id = callback_query.message.chat.id
    label = await get_user_label(telegram_id)
    bot_instance = callback_query.bot.bot_instance

    if not await bot_instance.payment_manager.check_payment(label):
        await callback_query.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    user = await get_user(telegram_id)
    if not user:
        await callback_query.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.", show_alert=True)
        return

    response = await bot_instance.user_api.get_user()
    status = response.get("status")
    data = response.get("data", {})

    if status != 200:
        await handle_api_error(callback_query.message, status, data.get("error"))
        return

    is_paid_server = data.get("is_paid", False)
    now = datetime.now()

    if user.expires_at and user.expires_at > now:
        if not is_paid_server:
            await bot_instance.user_api.confirm_payment()
        await callback_query.message.edit_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    if user.expires_at and user.expires_at < now:
        await callback_query.message.edit_text(
            "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫.\nüí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ /pay."
        )
        return

    await confirm_local_payment(telegram_id)
    await bot_instance.user_api.confirm_payment()
    await callback_query.message.edit_text("‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")


async def registration_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    await state.set_state(RegistrationState.waiting_for_name)


async def process_name(message: types.Message, state: FSMContext):
    bot_instance = message.bot.bot_instance
    telegram_id = message.from_user.id
    name = message.text

    response = await bot_instance.user_api.create_user(telegram_id, name)
    status = response.get("status")
    data = response.get("data", {})

    if status != 201:
        await handle_api_error(message, status, data.get("error"))
        return

    await create_user(telegram_id, name, data.get("access_token"))
    await message.reply("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /me –∏–ª–∏ /pay.")
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("menu:"))
async def handle_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split(":")[1]
    bot_instance = callback_query.bot.bot_instance
    await callback_query.answer()

    if data == "profile":
        await bot_instance.handle_get_user(callback_query.message)
    elif data == "pay":
        await bot_instance.handle_payment(callback_query.message)
    elif data == "configs":
        await callback_query.message.edit_text(
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏:",
            reply_markup=InlineKeyboardBuilder()
            .row(
                InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å üõ†", callback_data="config:create"),
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üóë", callback_data="config:delete"),
            )
            .row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back"))
            .as_markup(),
        )
    elif data == "back":
        await callback_query.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    elif data == "help":
        await callback_query.message.edit_text(
            "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
            "/start ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            "/me ‚Äì –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/pay ‚Äì –æ–ø–ª–∞—Ç–∞\n"
            "/create_config ‚Äì —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥\n\n"
            'üì¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: <a href="https://t.me/Neimes">—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>',
            parse_mode="HTML".row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")).as_markup(),
        )
    elif data == "registration":
        await registration_callback(callback_query, state)


@router.callback_query(lambda c: c.data == "config:create")
async def config_create_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    bot_instance = callback_query.bot.bot_instance
    await bot_instance.handle_create_config(callback_query.message)


@router.callback_query(lambda c: c.data == "config:delete")
async def config_delete_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("üîß –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


async def handle_admin_callbacks(callback_query: types.CallbackQuery, state: FSMContext):
    bot_instance = callback_query.bot.bot_instance
    data = callback_query.data.split(":")[1]
    await callback_query.answer()

    if data == "main":
        await callback_query.message.edit_text("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_main_keyboard())
    elif data == "users":
        await callback_query.message.edit_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=get_admin_users_keyboard())
    elif data == "subscriptions":
        await callback_query.message.edit_text("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:", reply_markup=get_admin_subscriptions_keyboard())
    elif data == "configs":
        await callback_query.message.edit_text("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏:", reply_markup=get_admin_configs_keyboard())
    elif data == "all_users":
        response = await bot_instance.admin_api.get_all_users()
        users = response.get("data", [])
        text = "\n".join([f"‚ñ™Ô∏è {u['telegram_id']} | {u['name']}" for u in users[:10]]) or "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        await callback_query.message.edit_text(f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{text}")
    elif callback_query.data.startswith("admin:create_config_select:"):
        try:
            offset = int(callback_query.data.split(":")[2])
        except (IndexError, ValueError):
            offset = 0
        await show_user_selection(callback_query, offset, action="create_config")

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    elif callback_query.data.startswith("admin:extend_subscription_select:"):
        try:
            offset = int(callback_query.data.split(":")[2])
        except (IndexError, ValueError):
            offset = 0
        await show_user_selection(callback_query, offset, action="extend_subscription")

    elif data.startswith("extend_subscription_for"):
        target_id = int(data.split(":")[2])
        result = await bot_instance.admin_api.admin_extend_subscription(target_id, days=30)
        if result["status"] == 200:
            await callback_query.message.edit_text("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
        else:
            await handle_api_error(callback_query.message, result["status"], result["data"].get("error"))

    else:
        await callback_query.message.answer("‚è≥ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.message(AdminState.waiting_for_user_id_lookup)
async def handle_lookup_user(message: types.Message, state: FSMContext):
    bot_instance = message.bot.bot_instance
    try:
        telegram_id = int(message.text)
        result = await bot_instance.admin_api.get_user_by_id(telegram_id)
        data = result.get("data", {})
        if result["status"] != 200:
            await handle_api_error(message, result["status"], data.get("error"))
            return
        user_info = (
            f"üîé <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            f"‚ñ™Ô∏è ID: <code>{data.get('telegram_id')}</code>\n"
            f"‚ñ™Ô∏è –ò–º—è: <b>{data.get('name')}</b>\n"
            f"‚ñ™Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>{data.get('expires_at')}</b>\n"
            f"‚ñ™Ô∏è –ê–¥–º–∏–Ω: {'‚úÖ' if data.get('is_admin') else '‚ùå'}\n"
        )
        await message.answer(user_info, parse_mode="HTML")
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
    await state.clear()


@router.message(AdminState.waiting_for_user_id_delete)
async def handle_delete_user(message: types.Message, state: FSMContext):
    bot_instance = message.bot.bot_instance
    try:
        telegram_id = int(message.text)
        result = await bot_instance.admin_api.admin_delete_user(telegram_id)
        if result["status"] == 200:
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await handle_api_error(message, result["status"], result["data"].get("error"))
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
    await state.clear()


@router.message(AdminState.waiting_for_user_id_extend)
async def handle_extend_user(message: types.Message, state: FSMContext):
    bot_instance = message.bot.bot_instance
    try:
        telegram_id = int(message.text)
        result = await bot_instance.admin_api.admin_extend_subscription(telegram_id, days=30)
        if result["status"] == 200:
            await message.answer("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")
        else:
            await handle_api_error(message, result["status"], result["data"].get("error"))
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
    await state.clear()


async def show_user_selection(callback_query: types.CallbackQuery, offset: int, action: str):
    bot_instance = callback_query.bot.bot_instance
    response = await bot_instance.admin_api.get_all_users()
    users = response.get("data", [])

    per_page = 5
    total = len(users)
    users_page = users[offset : offset + per_page]

    kb = InlineKeyboardBuilder()
    for user in users_page:
        uid = user["telegram_id"]
        name = user.get("name", "–±–µ–∑ –∏–º–µ–Ω–∏")
        if action == "create_config":
            cb = f"admin:create_config_for:{uid}"
            text = f"üìÅ {uid} | {name}"
        else:
            cb = f"admin:extend_subscription_for:{uid}"
            text = f"üìÖ {uid} | {name}"
        kb.row(InlineKeyboardButton(text=text, callback_data=cb))

    nav_row = []
    if offset > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:{action}_select:{offset - per_page}"))
    if offset + per_page < total:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"admin:{action}_select:{offset + per_page}"))
    if nav_row:
        kb.row(*nav_row)
    kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:main"))

    title = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    await callback_query.message.edit_text(title, reply_markup=kb.as_markup())
